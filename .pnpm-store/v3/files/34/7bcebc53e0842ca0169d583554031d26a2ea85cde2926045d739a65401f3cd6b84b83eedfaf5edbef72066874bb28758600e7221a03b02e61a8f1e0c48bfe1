import { isPlainObject } from "is-plain-object";
import { validate } from "@kubernetes-models/validate";
const SCHEMA_ID = Symbol("SCHEMA_ID");
const ADD_SCHEMA = Symbol("ADD_SCHEMA");
function setDefinedProps(src, dst) {
    for (const key of Object.keys(src)) {
        if (src[key] !== undefined) {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            dst[key] = filterUndefinedValues(src[key]);
        }
    }
    return dst;
}
function filterUndefinedValues(data) {
    if (Array.isArray(data)) {
        return data.map(filterUndefinedValues);
    }
    if (isPlainObject(data)) {
        return setDefinedProps(data, {});
    }
    return data;
}
export class Model {
    constructor(data) {
        if (data) {
            setDefinedProps(data, this);
        }
    }
    toJSON() {
        const result = {};
        setDefinedProps(this, result);
        return result;
    }
    validate() {
        const id = this[SCHEMA_ID];
        if (!id)
            return;
        if (typeof this[ADD_SCHEMA] === "function") {
            this[ADD_SCHEMA]();
        }
        validate(id, this);
    }
    static setSchema(ctor, id, addSchema) {
        ctor.prototype[SCHEMA_ID] = id;
        ctor.prototype[ADD_SCHEMA] = addSchema;
    }
}
//# sourceMappingURL=model.mjs.map