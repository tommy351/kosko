{"version":3,"file":"index.js","sources":["../src/normalize-options.js","../src/index.js"],"sourcesContent":["import { OptionValidator } from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-typescript\");\n\nexport default function normalizeOptions(options = {}) {\n  let { allowNamespaces = true, jsxPragma, onlyRemoveTypeImports } = options;\n\n  if (process.env.BABEL_8_BREAKING) {\n    const TopLevelOptions = {\n      allExtensions: \"allExtensions\",\n      allowNamespaces: \"allowNamespaces\",\n      isTSX: \"isTSX\",\n      jsxPragma: \"jsxPragma\",\n      jsxPragmaFrag: \"jsxPragmaFrag\",\n      onlyRemoveTypeImports: \"onlyRemoveTypeImports\",\n    };\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    allowNamespaces = v.validateBooleanOption(\n      TopLevelOptions.allowNamespaces,\n      options.allowNamespaces,\n      true,\n    );\n    jsxPragma = v.validateStringOption(\n      TopLevelOptions.jsxPragma,\n      options.jsxPragma,\n      \"React\",\n    );\n    onlyRemoveTypeImports = v.validateBooleanOption(\n      TopLevelOptions.onlyRemoveTypeImports,\n      options.onlyRemoveTypeImports,\n      true,\n    );\n  }\n\n  const jsxPragmaFrag = v.validateStringOption(\n    \"jsxPragmaFrag\",\n    options.jsxPragmaFrag,\n    \"React.Fragment\",\n  );\n\n  const allExtensions = v.validateBooleanOption(\n    \"allExtensions\",\n    options.allExtensions,\n    false,\n  );\n\n  const isTSX = v.validateBooleanOption(\"isTSX\", options.isTSX, false);\n\n  if (isTSX) {\n    v.invariant(allExtensions, \"isTSX:true requires allExtensions:true\");\n  }\n\n  return {\n    allExtensions,\n    allowNamespaces,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n  };\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport transformTypeScript from \"@babel/plugin-transform-typescript\";\nimport normalizeOptions from \"./normalize-options\";\n\nexport default declare((api, opts) => {\n  api.assertVersion(7);\n\n  const {\n    allExtensions,\n    allowNamespaces,\n    isTSX,\n    jsxPragma,\n    jsxPragmaFrag,\n    onlyRemoveTypeImports,\n  } = normalizeOptions(opts);\n\n  const pluginOptions = process.env.BABEL_8_BREAKING\n    ? isTSX => ({\n        allowNamespaces,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n      })\n    : isTSX => ({\n        allowDeclareFields: opts.allowDeclareFields,\n        allowNamespaces,\n        isTSX,\n        jsxPragma,\n        jsxPragmaFrag,\n        onlyRemoveTypeImports,\n      });\n\n  return {\n    overrides: allExtensions\n      ? [\n          {\n            plugins: [[transformTypeScript, pluginOptions(isTSX)]],\n          },\n        ]\n      : [\n          {\n            // Only set 'test' if explicitly requested, since it requires that\n            // Babel is being called`\n            test: /\\.ts$/,\n            plugins: [[transformTypeScript, pluginOptions(false)]],\n          },\n          {\n            // Only set 'test' if explicitly requested, since it requires that\n            // Babel is being called`\n            test: /\\.tsx$/,\n            plugins: [[transformTypeScript, pluginOptions(true)]],\n          },\n        ],\n  };\n});\n"],"names":["v","OptionValidator","normalizeOptions","options","allowNamespaces","jsxPragma","onlyRemoveTypeImports","jsxPragmaFrag","validateStringOption","allExtensions","validateBooleanOption","isTSX","invariant","declare","api","opts","assertVersion","pluginOptions","allowDeclareFields","overrides","plugins","transformTypeScript","test"],"mappings":";;;;;;;;;;;;AACA,MAAMA,CAAC,GAAG,IAAIC,qCAAJ,CAAoB,0BAApB,CAAV;AAEe,SAASC,gBAAT,CAA0BC,OAAO,GAAG,EAApC,EAAwC;AACrD,MAAI;AAAEC,IAAAA,eAAe,GAAG,IAApB;AAA0BC,IAAAA,SAA1B;AAAqCC,IAAAA;AAArC,MAA+DH,OAAnE;AA6BA,QAAMI,aAAa,GAAGP,CAAC,CAACQ,oBAAF,CACpB,eADoB,EAEpBL,OAAO,CAACI,aAFY,EAGpB,gBAHoB,CAAtB;AAMA,QAAME,aAAa,GAAGT,CAAC,CAACU,qBAAF,CACpB,eADoB,EAEpBP,OAAO,CAACM,aAFY,EAGpB,KAHoB,CAAtB;AAMA,QAAME,KAAK,GAAGX,CAAC,CAACU,qBAAF,CAAwB,OAAxB,EAAiCP,OAAO,CAACQ,KAAzC,EAAgD,KAAhD,CAAd;;AAEA,MAAIA,KAAJ,EAAW;AACTX,IAAAA,CAAC,CAACY,SAAF,CAAYH,aAAZ,EAA2B,wCAA3B;AACD;;AAED,SAAO;AACLA,IAAAA,aADK;AAELL,IAAAA,eAFK;AAGLO,IAAAA,KAHK;AAILN,IAAAA,SAJK;AAKLE,IAAAA,aALK;AAMLD,IAAAA;AANK,GAAP;AAQD;;ACvDD,YAAeO,yBAAO,CAAC,CAACC,GAAD,EAAMC,IAAN,KAAe;AACpCD,EAAAA,GAAG,CAACE,aAAJ,CAAkB,CAAlB;AAEA,QAAM;AACJP,IAAAA,aADI;AAEJL,IAAAA,eAFI;AAGJO,IAAAA,KAHI;AAIJN,IAAAA,SAJI;AAKJE,IAAAA,aALI;AAMJD,IAAAA;AANI,MAOFJ,gBAAgB,CAACa,IAAD,CAPpB;;AASA,QAAME,aAAa,GAQfN,KAAK,KAAK;AACRO,IAAAA,kBAAkB,EAAEH,IAAI,CAACG,kBADjB;AAERd,IAAAA,eAFQ;AAGRO,IAAAA,KAHQ;AAIRN,IAAAA,SAJQ;AAKRE,IAAAA,aALQ;AAMRD,IAAAA;AANQ,GAAL,CART;;AAiBA,SAAO;AACLa,IAAAA,SAAS,EAAEV,aAAa,GACpB,CACE;AACEW,MAAAA,OAAO,EAAE,CAAC,CAACC,uCAAD,EAAsBJ,aAAa,CAACN,KAAD,CAAnC,CAAD;AADX,KADF,CADoB,GAMpB,CACE;AAGEW,MAAAA,IAAI,EAAE,OAHR;AAIEF,MAAAA,OAAO,EAAE,CAAC,CAACC,uCAAD,EAAsBJ,aAAa,CAAC,KAAD,CAAnC,CAAD;AAJX,KADF,EAOE;AAGEK,MAAAA,IAAI,EAAE,QAHR;AAIEF,MAAAA,OAAO,EAAE,CAAC,CAACC,uCAAD,EAAsBJ,aAAa,CAAC,IAAD,CAAnC,CAAD;AAJX,KAPF;AAPC,GAAP;AAsBD,CAnDqB,CAAtB;;;;"}