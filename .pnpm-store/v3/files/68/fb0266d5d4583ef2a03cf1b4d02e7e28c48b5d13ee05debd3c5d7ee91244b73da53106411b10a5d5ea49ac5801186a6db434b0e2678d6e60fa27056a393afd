{"version":3,"file":"index.production.js","sources":["../../../autocomplete-shared/dist/esm/getAttributeValueByPath.js","../../src/constants/index.ts","../../src/highlight/parseAttribute.ts","../../src/highlight/parseAlgoliaHitHighlight.ts","../../src/highlight/isPartHighlighted.ts","../../src/highlight/reverseHighlightedParts.ts","../../src/highlight/parseAlgoliaHitSnippet.ts","../../src/version.ts","../../src/search/search.ts","../../src/search/getAlgoliaFacetHits.ts","../../src/search/searchForFacetValues.ts","../../src/search/getAlgoliaHits.ts","../../src/search/getAlgoliaResults.ts","../../src/highlight/parseAlgoliaHitReverseHighlight.ts","../../src/highlight/parseAlgoliaHitReverseSnippet.ts"],"sourcesContent":["export function getAttributeValueByPath(record, path) {\n  return path.reduce(function (current, key) {\n    return current && current[key];\n  }, record);\n}","export const HIGHLIGHT_PRE_TAG = '__aa-highlight__';\nexport const HIGHLIGHT_POST_TAG = '__/aa-highlight__';\n","import { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n\nimport { ParsedAttribute } from './ParsedAttribute';\n\n/**\n * Creates a data structure that allows to concatenate similar highlighting\n * parts in a single value.\n */\nfunction createAttributeSet(initialValue: ParsedAttribute[] = []) {\n  const value = initialValue;\n\n  return {\n    get() {\n      return value;\n    },\n    add(part: ParsedAttribute) {\n      const lastPart: ParsedAttribute | undefined = value[value.length - 1];\n\n      if (lastPart?.isHighlighted === part.isHighlighted) {\n        value[value.length - 1] = {\n          value: lastPart.value + part.value,\n          isHighlighted: lastPart.isHighlighted,\n        };\n      } else {\n        value.push(part);\n      }\n    },\n  };\n}\n\ntype ParseAttributeParams = {\n  highlightedValue: string;\n};\n\nexport function parseAttribute({\n  highlightedValue,\n}: ParseAttributeParams): ParsedAttribute[] {\n  const preTagParts = highlightedValue.split(HIGHLIGHT_PRE_TAG);\n  const firstValue = preTagParts.shift();\n  const parts = createAttributeSet(\n    firstValue ? [{ value: firstValue, isHighlighted: false }] : []\n  );\n\n  preTagParts.forEach((part) => {\n    const postTagParts = part.split(HIGHLIGHT_POST_TAG);\n\n    parts.add({\n      value: postTagParts[0],\n      isHighlighted: true,\n    });\n\n    if (postTagParts[1] !== '') {\n      parts.add({\n        value: postTagParts[1],\n        isHighlighted: false,\n      });\n    }\n  });\n\n  return parts.get();\n}\n","import { getAttributeValueByPath, warn } from '@algolia/autocomplete-shared';\n\nimport { HighlightedHit } from './HighlightedHit';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitHighlight<THit extends HighlightedHit<unknown>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = Array.isArray(attribute) ? attribute : ([attribute] as string[]);\n  let highlightedValue = getAttributeValueByPath(hit, [\n    '_highlightResult',\n    ...path,\n    'value',\n  ]);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute \"${path.join('.')}\" described by the path ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToHighlight\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToHighlight/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, path) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { ParsedAttribute } from './ParsedAttribute';\n\nconst htmlEscapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n};\nconst hasAlphanumeric = new RegExp(/\\w/i);\nconst regexEscapedHtml = /&(amp|quot|lt|gt|#39);/g;\nconst regexHasEscapedHtml = RegExp(regexEscapedHtml.source);\n\nfunction unescape(value: string): string {\n  return value && regexHasEscapedHtml.test(value)\n    ? value.replace(regexEscapedHtml, (character) => htmlEscapes[character])\n    : value;\n}\n\nexport function isPartHighlighted(parts: ParsedAttribute[], i: number) {\n  const current = parts[i];\n  const isNextHighlighted = parts[i + 1]?.isHighlighted || true;\n  const isPreviousHighlighted = parts[i - 1]?.isHighlighted || true;\n\n  if (\n    !hasAlphanumeric.test(unescape(current.value)) &&\n    isPreviousHighlighted === isNextHighlighted\n  ) {\n    return isPreviousHighlighted;\n  }\n\n  return current.isHighlighted;\n}\n","import { isPartHighlighted } from './isPartHighlighted';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function reverseHighlightedParts(parts: ParsedAttribute[]) {\n  // We don't want to highlight the whole word when no parts match.\n  if (!parts.some((part) => part.isHighlighted)) {\n    return parts.map((part) => ({ ...part, isHighlighted: false }));\n  }\n\n  return parts.map((part, i) => ({\n    ...part,\n    isHighlighted: !isPartHighlighted(parts, i),\n  }));\n}\n","import { getAttributeValueByPath, warn } from '@algolia/autocomplete-shared';\n\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { SnippetedHit } from './SnippetedHit';\n\nexport function parseAlgoliaHitSnippet<THit extends SnippetedHit<unknown>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = Array.isArray(attribute) ? attribute : ([attribute] as string[]);\n  let highlightedValue = getAttributeValueByPath(hit, [\n    '_snippetResult',\n    ...path,\n    'value',\n  ]);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute \"${path.join('.')}\" described by the path ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToSnippet\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToSnippet/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, path) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","export const version = '1.0.0-alpha.44';\n","import { MultipleQueriesQuery } from '@algolia/client-search';\nimport { SearchClient } from 'algoliasearch/lite';\n\nimport { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\nimport { version } from '../version';\n\nimport { UserAgent } from './UserAgent';\n\nexport interface SearchParams {\n  searchClient: SearchClient;\n  queries: MultipleQueriesQuery[];\n  userAgents?: UserAgent[];\n}\n\nexport function search<TRecord>({\n  searchClient,\n  queries,\n  userAgents = [],\n}: SearchParams) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    const algoliaAgents: UserAgent[] = [\n      { segment: 'autocomplete-core', version },\n      ...userAgents,\n    ];\n\n    algoliaAgents.forEach(({ segment, version }) => {\n      searchClient.addAlgoliaAgent(segment, version);\n    });\n  }\n\n  return searchClient.search<TRecord>(\n    queries.map((searchParameters) => {\n      const { indexName, query, params } = searchParameters;\n\n      return {\n        indexName,\n        query,\n        params: {\n          hitsPerPage: 5,\n          highlightPreTag: HIGHLIGHT_PRE_TAG,\n          highlightPostTag: HIGHLIGHT_POST_TAG,\n          ...params,\n        },\n      };\n    })\n  );\n}\n","import {\n  searchForFacetValues,\n  SearchForFacetValuesParams,\n} from './searchForFacetValues';\n\ntype FacetHit = {\n  label: string;\n  count: number;\n  _highlightResult: {\n    label: {\n      value: string;\n    };\n  };\n};\n\nexport function getAlgoliaFacetHits({\n  searchClient,\n  queries,\n  userAgents,\n}: SearchForFacetValuesParams): Promise<FacetHit[][]> {\n  return searchForFacetValues({ searchClient, queries, userAgents }).then(\n    (response) => {\n      return response.map((result) =>\n        result.facetHits.map((facetHit) => {\n          return {\n            label: facetHit.value,\n            count: facetHit.count,\n            _highlightResult: {\n              label: {\n                value: facetHit.highlighted,\n              },\n            },\n          };\n        })\n      );\n    }\n  );\n}\n","import {\n  SearchForFacetValuesQueryParams,\n  SearchOptions,\n} from '@algolia/client-search';\nimport { SearchClient } from 'algoliasearch/lite';\n\nimport { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\nimport { version } from '../version';\n\nimport { UserAgent } from './UserAgent';\n\ntype FacetQuery = {\n  indexName: string;\n  params: SearchForFacetValuesQueryParams & SearchOptions;\n};\nexport interface SearchForFacetValuesParams {\n  searchClient: SearchClient;\n  queries: FacetQuery[];\n  userAgents?: UserAgent[];\n}\n\nexport function searchForFacetValues({\n  searchClient,\n  queries,\n  userAgents = [],\n}: SearchForFacetValuesParams) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    const algoliaAgents: UserAgent[] = [\n      { segment: 'autocomplete-core', version },\n      ...userAgents,\n    ];\n\n    algoliaAgents.forEach(({ segment, version }) => {\n      searchClient.addAlgoliaAgent(segment, version);\n    });\n  }\n\n  return searchClient.searchForFacetValues(\n    queries.map((searchParameters) => {\n      const { indexName, params } = searchParameters;\n\n      return {\n        indexName,\n        params: {\n          highlightPreTag: HIGHLIGHT_PRE_TAG,\n          highlightPostTag: HIGHLIGHT_POST_TAG,\n          ...params,\n        },\n      };\n    })\n  );\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaHits<TRecord>({\n  searchClient,\n  queries,\n  userAgents,\n}: SearchParams): Promise<Array<Array<Hit<TRecord>>>> {\n  return search<TRecord>({ searchClient, queries, userAgents }).then(\n    (response) => {\n      const results = response.results;\n\n      return results.map((result) =>\n        result.hits.map((hit) => {\n          return {\n            ...hit,\n            __autocomplete_indexName: result.index,\n            __autocomplete_queryID: result.queryID,\n          };\n        })\n      );\n    }\n  );\n}\n","import { SearchResponse } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaResults<TRecord>({\n  searchClient,\n  queries,\n  userAgents,\n}: SearchParams): Promise<Array<SearchResponse<TRecord>>> {\n  return search<TRecord>({ searchClient, queries, userAgents }).then(\n    (response) => {\n      return response.results;\n    }\n  );\n}\n","import { HighlightedHit } from './HighlightedHit';\nimport { parseAlgoliaHitHighlight } from './parseAlgoliaHitHighlight';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseHighlight<\n  THit extends HighlightedHit<unknown>\n>(props: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitHighlight<THit>(props));\n}\n","import { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAlgoliaHitSnippet } from './parseAlgoliaHitSnippet';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\nimport { SnippetedHit } from './SnippetedHit';\n\nexport function parseAlgoliaHitReverseSnippet<\n  THit extends SnippetedHit<unknown>\n>(props: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitSnippet<THit>(props));\n}\n"],"names":["getAttributeValueByPath","record","path","reduce","current","key","HIGHLIGHT_PRE_TAG","HIGHLIGHT_POST_TAG","parseAttribute","preTagParts","highlightedValue","split","firstValue","shift","parts","value","get","add","part","lastPart","length","isHighlighted","push","createAttributeSet","forEach","postTagParts","parseAlgoliaHitHighlight","hit","attribute","Array","isArray","htmlEscapes","hasAlphanumeric","RegExp","regexEscapedHtml","regexHasEscapedHtml","source","isPartHighlighted","i","isNextHighlighted","isPreviousHighlighted","test","replace","character","reverseHighlightedParts","some","map","parseAlgoliaHitSnippet","version","search","searchClient","queries","userAgents","addAlgoliaAgent","segment","searchParameters","indexName","query","params","hitsPerPage","highlightPreTag","highlightPostTag","searchForFacetValues","then","response","result","facetHits","facetHit","label","count","_highlightResult","highlighted","results","hits","__autocomplete_indexName","index","__autocomplete_queryID","queryID","props"],"mappings":"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"}