"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavigationBuilder = exports.DefaultTheme = void 0;
const Path = require("path");
const FS = require("fs");
const theme_1 = require("../theme");
const index_1 = require("../../models/reflections/index");
const UrlMapping_1 = require("../models/UrlMapping");
const NavigationItem_1 = require("../models/NavigationItem");
const events_1 = require("../events");
/**
 * Default theme implementation of TypeDoc. If a theme does not provide a custom
 * [[BaseTheme]] implementation, this theme class will be used.
 */
class DefaultTheme extends theme_1.Theme {
    /**
     * Create a new DefaultTheme instance.
     *
     * @param renderer  The renderer this theme is attached to.
     * @param basePath  The base path of this theme.
     */
    constructor(renderer, basePath) {
        super(renderer, basePath);
        this.listenTo(renderer, events_1.RendererEvent.BEGIN, this.onRendererBegin, 1024);
    }
    /**
     * Test whether the given path contains a documentation generated by this theme.
     *
     * @param path  The path of the directory that should be tested.
     * @returns     TRUE if the given path seems to be a previous output directory,
     *              otherwise FALSE.
     */
    isOutputDirectory(path) {
        if (!FS.existsSync(Path.join(path, "index.html"))) {
            return false;
        }
        if (!FS.existsSync(Path.join(path, "assets"))) {
            return false;
        }
        if (!FS.existsSync(Path.join(path, "assets", "js", "main.js"))) {
            return false;
        }
        if (!FS.existsSync(Path.join(path, "assets", "images", "icons.png"))) {
            return false;
        }
        return true;
    }
    /**
     * Map the models of the given project to the desired output files.
     *
     * @param project  The project whose urls should be generated.
     * @returns        A list of [[UrlMapping]] instances defining which models
     *                 should be rendered to which files.
     */
    getUrls(project) {
        var _a;
        const urls = [];
        if (this.application.options.getValue("readme") === "none") {
            project.url = "index.html";
            urls.push(new UrlMapping_1.UrlMapping("index.html", project, "reflection.hbs"));
        }
        else {
            project.url = "modules.html";
            urls.push(new UrlMapping_1.UrlMapping("modules.html", project, "reflection.hbs"));
            urls.push(new UrlMapping_1.UrlMapping("index.html", project, "index.hbs"));
        }
        (_a = project.children) === null || _a === void 0 ? void 0 : _a.forEach((child) => {
            if (child instanceof index_1.DeclarationReflection) {
                DefaultTheme.buildUrls(child, urls);
            }
        });
        return urls;
    }
    /**
     * Create a navigation structure for the given project.
     *
     * @param project  The project whose navigation should be generated.
     * @returns        The root navigation item.
     */
    getNavigation(project) {
        const builder = new NavigationBuilder(project, project, this.application.options.getValue("entryPoints").length > 1);
        return builder.build(this.application.options.getValue("readme") !== "none");
    }
    /**
     * Triggered before the renderer starts rendering a project.
     *
     * @param event  An event object describing the current render operation.
     */
    onRendererBegin(event) {
        if (event.project.groups) {
            event.project.groups.forEach(DefaultTheme.applyGroupClasses);
        }
        for (const id in event.project.reflections) {
            const reflection = event.project.reflections[id];
            if (reflection instanceof index_1.DeclarationReflection) {
                DefaultTheme.applyReflectionClasses(reflection);
            }
            if (reflection instanceof index_1.ContainerReflection &&
                reflection.groups) {
                reflection.groups.forEach(DefaultTheme.applyGroupClasses);
            }
        }
    }
    /**
     * Return a url for the given reflection.
     *
     * @param reflection  The reflection the url should be generated for.
     * @param relative    The parent reflection the url generation should stop on.
     * @param separator   The separator used to generate the url.
     * @returns           The generated url.
     */
    static getUrl(reflection, relative, separator = ".") {
        let url = reflection.getAlias();
        if (reflection.parent &&
            reflection.parent !== relative &&
            !(reflection.parent instanceof index_1.ProjectReflection)) {
            url =
                DefaultTheme.getUrl(reflection.parent, relative, separator) +
                    separator +
                    url;
        }
        return url;
    }
    /**
     * Return the template mapping for the given reflection.
     *
     * @param reflection  The reflection whose mapping should be resolved.
     * @returns           The found mapping or undefined if no mapping could be found.
     */
    static getMapping(reflection) {
        return DefaultTheme.MAPPINGS.find((mapping) => reflection.kindOf(mapping.kind));
    }
    /**
     * Build the url for the the given reflection and all of its children.
     *
     * @param reflection  The reflection the url should be created for.
     * @param urls        The array the url should be appended to.
     * @returns           The altered urls array.
     */
    static buildUrls(reflection, urls) {
        const mapping = DefaultTheme.getMapping(reflection);
        if (mapping) {
            if (!reflection.url ||
                !DefaultTheme.URL_PREFIX.test(reflection.url)) {
                const url = [
                    mapping.directory,
                    DefaultTheme.getUrl(reflection) + ".html",
                ].join("/");
                urls.push(new UrlMapping_1.UrlMapping(url, reflection, mapping.template));
                reflection.url = url;
                reflection.hasOwnDocument = true;
            }
            for (const child of reflection.children || []) {
                if (mapping.isLeaf) {
                    DefaultTheme.applyAnchorUrl(child, reflection);
                }
                else {
                    DefaultTheme.buildUrls(child, urls);
                }
            }
        }
        else if (reflection.parent) {
            DefaultTheme.applyAnchorUrl(reflection, reflection.parent);
        }
        return urls;
    }
    /**
     * Generate an anchor url for the given reflection and all of its children.
     *
     * @param reflection  The reflection an anchor url should be created for.
     * @param container   The nearest reflection having an own document.
     */
    static applyAnchorUrl(reflection, container) {
        if (!reflection.url || !DefaultTheme.URL_PREFIX.test(reflection.url)) {
            const anchor = DefaultTheme.getUrl(reflection, container, ".");
            reflection.url = container.url + "#" + anchor;
            reflection.anchor = anchor;
            reflection.hasOwnDocument = false;
        }
        reflection.traverse((child) => {
            if (child instanceof index_1.DeclarationReflection) {
                DefaultTheme.applyAnchorUrl(child, container);
            }
        });
    }
    /**
     * Generate the css classes for the given reflection and apply them to the
     * [[DeclarationReflection.cssClasses]] property.
     *
     * @param reflection  The reflection whose cssClasses property should be generated.
     */
    static applyReflectionClasses(reflection) {
        const classes = [];
        let kind;
        if (reflection.kind === index_1.ReflectionKind.Accessor) {
            if (!reflection.getSignature) {
                classes.push("tsd-kind-set-signature");
            }
            else if (!reflection.setSignature) {
                classes.push("tsd-kind-get-signature");
            }
            else {
                classes.push("tsd-kind-accessor");
            }
        }
        else {
            kind = index_1.ReflectionKind[reflection.kind];
            classes.push(DefaultTheme.toStyleClass("tsd-kind-" + kind));
        }
        if (reflection.parent &&
            reflection.parent instanceof index_1.DeclarationReflection) {
            kind = index_1.ReflectionKind[reflection.parent.kind];
            classes.push(DefaultTheme.toStyleClass(`tsd-parent-kind-${kind}`));
        }
        let hasTypeParameters = !!reflection.typeParameters;
        reflection.getAllSignatures().forEach((signature) => {
            hasTypeParameters = hasTypeParameters || !!signature.typeParameters;
        });
        if (hasTypeParameters) {
            classes.push("tsd-has-type-parameter");
        }
        if (reflection.overwrites) {
            classes.push("tsd-is-overwrite");
        }
        if (reflection.inheritedFrom) {
            classes.push("tsd-is-inherited");
        }
        if (reflection.flags.isPrivate) {
            classes.push("tsd-is-private");
        }
        if (reflection.flags.isProtected) {
            classes.push("tsd-is-protected");
        }
        if (reflection.flags.isStatic) {
            classes.push("tsd-is-static");
        }
        if (reflection.flags.isExternal) {
            classes.push("tsd-is-external");
        }
        reflection.cssClasses = classes.join(" ");
    }
    /**
     * Generate the css classes for the given reflection group and apply them to the
     * [[ReflectionGroup.cssClasses]] property.
     *
     * @param group  The reflection group whose cssClasses property should be generated.
     */
    static applyGroupClasses(group) {
        const classes = [];
        if (group.allChildrenAreInherited) {
            classes.push("tsd-is-inherited");
        }
        if (group.allChildrenArePrivate) {
            classes.push("tsd-is-private");
        }
        if (group.allChildrenAreProtectedOrPrivate) {
            classes.push("tsd-is-private-protected");
        }
        if (group.allChildrenAreExternal) {
            classes.push("tsd-is-external");
        }
        group.cssClasses = classes.join(" ");
    }
    /**
     * Transform a space separated string into a string suitable to be used as a
     * css class, e.g. "constructor method" > "Constructor-method".
     */
    static toStyleClass(str) {
        return str
            .replace(/(\w)([A-Z])/g, (_m, m1, m2) => m1 + "-" + m2)
            .toLowerCase();
    }
}
exports.DefaultTheme = DefaultTheme;
/**
 * Mappings of reflections kinds to templates used by this theme.
 */
DefaultTheme.MAPPINGS = [
    {
        kind: [index_1.ReflectionKind.Class],
        isLeaf: false,
        directory: "classes",
        template: "reflection.hbs",
    },
    {
        kind: [index_1.ReflectionKind.Interface],
        isLeaf: false,
        directory: "interfaces",
        template: "reflection.hbs",
    },
    {
        kind: [index_1.ReflectionKind.Enum],
        isLeaf: false,
        directory: "enums",
        template: "reflection.hbs",
    },
    {
        kind: [index_1.ReflectionKind.Namespace, index_1.ReflectionKind.Module],
        isLeaf: false,
        directory: "modules",
        template: "reflection.hbs",
    },
];
DefaultTheme.URL_PREFIX = /^(http|ftp)s?:\/\//;
class NavigationBuilder {
    constructor(project, entryPoint, multipleEntryPoints) {
        this.project = project;
        this.entryPoint = entryPoint;
        this.multipleEntryPoints = multipleEntryPoints;
    }
    /**
     * Build the navigation structure.
     *
     * @param hasReadmeFile True if the project has a readme
     * @returns The root node of the generated navigation structure.
     */
    build(hasReadmeFile) {
        const root = new NavigationItem_1.NavigationItem("Index", "index.html");
        const sidebarRoot = new NavigationItem_1.NavigationItem(this.multipleEntryPoints ? "Modules" : "Exports", hasReadmeFile ? "modules.html" : "index.html", root);
        sidebarRoot.isModules = true;
        const modules = [];
        this.project
            .getReflectionsByKind(index_1.ReflectionKind.SomeModule)
            .forEach((someModule) => {
            let target = someModule.parent;
            let inScope = someModule === this.entryPoint;
            while (target) {
                if (target.kindOf(index_1.ReflectionKind.Module)) {
                    return;
                }
                if (this.entryPoint === target) {
                    inScope = true;
                }
                target = target.parent;
            }
            if (inScope &&
                someModule instanceof index_1.DeclarationReflection &&
                someModule.children &&
                someModule.children.length > 0) {
                modules.push(someModule);
            }
        });
        if (modules.length < 10) {
            this.buildGroups(modules, root);
        }
        else {
            this.buildGroups(this.entryPoint.getChildrenByKind(index_1.ReflectionKind.SomeModule), root, true);
        }
        return root;
    }
    /**
     * Create navigation nodes for the given list of reflections. The resulting nodes will be grouped into
     * an "internal" and an "external" section when applicable.
     *
     * @param reflections  The list of reflections which should be transformed into navigation nodes.
     * @param parent       The parent NavigationItem of the newly created nodes.
     * @param buildChildren Whether navigation nodes should also be built for the children of each reflection.
     */
    buildGroups(reflections, parent, buildChildren = false) {
        let state = -1;
        const hasExternals = this.containsExternals(reflections);
        this.sortReflections(reflections);
        reflections.forEach((reflection) => {
            if (hasExternals && !reflection.flags.isExternal && state !== 1) {
                new NavigationItem_1.NavigationItem("Internals", undefined, parent, "tsd-is-external");
                state = 1;
            }
            else if (hasExternals &&
                reflection.flags.isExternal &&
                state !== 2) {
                new NavigationItem_1.NavigationItem("Externals", undefined, parent, "tsd-is-external");
                state = 2;
            }
            const item = NavigationItem_1.NavigationItem.create(reflection, parent);
            this.includeDedicatedUrls(reflection, item);
            if (buildChildren) {
                this.buildChildren(reflection, item);
            }
        });
    }
    /**
     * Create navigation nodes for all container children of the given reflection.
     *
     * @param reflection  The reflection whose children modules should be transformed into navigation nodes.
     * @param parent      The parent NavigationItem of the newly created nodes.
     */
    buildChildren(reflection, parent) {
        const modules = reflection.getChildrenByKind(index_1.ReflectionKind.SomeModule);
        modules.sort((a, b) => {
            return a.getFullName() < b.getFullName() ? -1 : 1;
        });
        modules.forEach((reflection) => {
            const item = NavigationItem_1.NavigationItem.create(reflection, parent);
            this.includeDedicatedUrls(reflection, item);
            this.buildChildren(reflection, item);
        });
    }
    /**
     * Test whether the given list of modules contains an external module.
     *
     * @param modules  The list of modules to test.
     * @returns        TRUE if any of the modules is marked as being external.
     */
    containsExternals(modules) {
        for (let index = 0, length = modules.length; index < length; index++) {
            if (modules[index].flags.isExternal) {
                return true;
            }
        }
        return false;
    }
    /**
     * Sort the given list of modules by name, groups external modules at the bottom.
     *
     * @param modules  The list of modules that should be sorted.
     */
    sortReflections(modules) {
        modules.sort((a, b) => {
            if (a.flags.isExternal && !b.flags.isExternal) {
                return 1;
            }
            if (!a.flags.isExternal && b.flags.isExternal) {
                return -1;
            }
            return a.getFullName() < b.getFullName() ? -1 : 1;
        });
    }
    /**
     * Find the urls of all children of the given reflection and store them as dedicated urls
     * of the given NavigationItem.
     *
     * @param reflection  The reflection whose children urls should be included.
     * @param item        The navigation node whose dedicated urls should be set.
     */
    includeDedicatedUrls(reflection, item) {
        (function walk(reflection) {
            for (const child of reflection.children || []) {
                if (child.hasOwnDocument &&
                    !child.kindOf(index_1.ReflectionKind.SomeModule)) {
                    if (!item.dedicatedUrls) {
                        item.dedicatedUrls = [];
                    }
                    item.dedicatedUrls.push(child.url);
                    walk(child);
                }
            }
        })(reflection);
    }
}
exports.NavigationBuilder = NavigationBuilder;
