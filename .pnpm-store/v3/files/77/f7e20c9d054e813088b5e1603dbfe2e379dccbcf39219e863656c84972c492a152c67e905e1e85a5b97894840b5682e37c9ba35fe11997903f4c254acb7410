/*

Preserves orignal formatting

 */
/* declarations can exist inside atrules */
@font-face {
  font-family: 'Test font';
}

/* comment before rule */
body/* comment after rule name */{
    /* comment before decl */
    padding /*  comment after prop */ : /*  comment before val */ 0 /*  comment after val */ 3px /* another comment */ 2px /* one more */ 1px /* last one*/;
    /* comment after decl */

    margin:
        0 /*top*/
        3px /*right
        multi-line
        comment
        */
        2px /*bottom*/
        1px /*left*/;

    border-right/*  comment after prop */: none;
}

/* should never process variables */
:root {
  --left-margin: 10px;
  --brightest: blue;
}

div.variable-demo {
  margin-right: var(--left-margin);
  color: var(--brightest);
}
/* end: should never process variables */

/* empty options forces defaults */
/* should not process urls - default */
@import url("rtl-right-east.css");
div:before { content: "ABC";} div:after { content: "A";}

.demo-next, .demo-Next, .demo-NEXT { content: 'p'; }
.demo-prev, .demo-Prev, .demo-PREV { content: 'n'; }


div {
  text-align: left;
  padding: 10px;
}
.sample {
    text-align: left;
}
.right { display:inline;}
/*rtl:begin:options:{"autoRename":true, "greedy": true}*/
.bleft { display:inline;}
/*rtl:end:options*/
.brighter { display:inline;}

/* auto rename only if a pair exists */

/* The following should not be renamed */
.ltr{ display: inline-flex;}

/* But these should */
.left{ display: inline-flex;}
.right { display: block;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBQ0gsMkNBQTJDO0FBQzNDO0VBQ0UseUJBQXlCO0NBQzFCOztBQUVELHlCQUF5QjtBQUN6QjtJQUNJLHlCQUF5QjtJQUN6Qix3SkFBd0o7SUFDeEosd0JBQXdCOztJQUV4Qjs7Ozs7OztxQkFPaUI7O0lBRWpCLDRDQUEyQztDQUM5Qzs7QUFFRCxvQ0FBb0M7QUFDcEM7RUFDRSxvQkFBb0I7RUFDcEIsa0JBQWtCO0NBQ25COztBQUVEO0VBQ0UsaUNBQWdDO0VBQ2hDLHdCQUF3QjtDQUN6QjtBQUNELHlDQUF5Qzs7QUFFekMsbUNBQW1DO0FBRW5DLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUF3Q2xDLGFBQWEsZUFBYSxDQUFDLENBQUMsWUFBWSxhQUFlLENBQUM7O0FBRXhELHFDQUFxQyxhQUFhLEVBQUU7QUFDcEQscUNBQXFDLGFBQWEsRUFBRTs7O0FBWXBEO0VBR0UsaUJBQWtCO0VBQ2xCLGNBQWM7Q0FDZjtBQUdEO0lBQ0ksaUJBQWlCO0NBQ3BCO0FBS0QsU0FBUyxlQUFlLENBQUM7QUFDekIseURBQXlEO0FBQ3pELFNBQVUsZUFBZSxDQUFDO0FBQzFCLG1CQUFtQjtBQUNuQixZQUFZLGVBQWUsQ0FBQzs7QUFHNUIsdUNBQXVDOztBQUl2Qyx5Q0FBeUM7QUFDekMsTUFBTSxxQkFBcUIsQ0FBQzs7QUFFNUIsc0JBQXNCO0FBQ3RCLE9BQVEscUJBQXFCLENBQUM7QUFDOUIsU0FBUSxlQUFlLENBQUMiLCJmaWxlIjoiaW5wdXQucnRsLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5cblByZXNlcnZlcyBvcmlnbmFsIGZvcm1hdHRpbmdcblxuICovXG4vKiBkZWNsYXJhdGlvbnMgY2FuIGV4aXN0IGluc2lkZSBhdHJ1bGVzICovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdUZXN0IGZvbnQnO1xufVxuXG4vKiBjb21tZW50IGJlZm9yZSBydWxlICovXG5ib2R5LyogY29tbWVudCBhZnRlciBydWxlIG5hbWUgKi97XG4gICAgLyogY29tbWVudCBiZWZvcmUgZGVjbCAqL1xuICAgIHBhZGRpbmcgLyogIGNvbW1lbnQgYWZ0ZXIgcHJvcCAqLyA6IC8qICBjb21tZW50IGJlZm9yZSB2YWwgKi8gMCAvKiAgY29tbWVudCBhZnRlciB2YWwgKi8gMXB4IC8qIGFub3RoZXIgY29tbWVudCAqLyAycHggLyogb25lIG1vcmUgKi8gM3B4IC8qIGxhc3Qgb25lKi87XG4gICAgLyogY29tbWVudCBhZnRlciBkZWNsICovXG5cbiAgICBtYXJnaW46XG4gICAgICAgIDAgLyp0b3AqL1xuICAgICAgICAxcHggLypyaWdodFxuICAgICAgICBtdWx0aS1saW5lXG4gICAgICAgIGNvbW1lbnRcbiAgICAgICAgKi9cbiAgICAgICAgMnB4IC8qYm90dG9tKi9cbiAgICAgICAgM3B4IC8qbGVmdCovO1xuXG4gICAgYm9yZGVyLWxlZnQvKiAgY29tbWVudCBhZnRlciBwcm9wICovOiBub25lO1xufVxuXG4vKiBzaG91bGQgbmV2ZXIgcHJvY2VzcyB2YXJpYWJsZXMgKi9cbjpyb290IHtcbiAgLS1sZWZ0LW1hcmdpbjogMTBweDtcbiAgLS1icmlnaHRlc3Q6IGJsdWU7XG59XG5cbmRpdi52YXJpYWJsZS1kZW1vIHtcbiAgbWFyZ2luLWxlZnQ6IHZhcigtLWxlZnQtbWFyZ2luKTtcbiAgY29sb3I6IHZhcigtLWJyaWdodGVzdCk7XG59XG4vKiBlbmQ6IHNob3VsZCBuZXZlciBwcm9jZXNzIHZhcmlhYmxlcyAqL1xuXG4vKiBlbXB0eSBvcHRpb25zIGZvcmNlcyBkZWZhdWx0cyAqL1xuLypydGw6YmVnaW46b3B0aW9uczoge30qL1xuLyogc2hvdWxkIG5vdCBwcm9jZXNzIHVybHMgLSBkZWZhdWx0ICovXG5AaW1wb3J0IHVybChcInJ0bC1yaWdodC1lYXN0LmNzc1wiKTtcbi8qcnRsOmVuZDpvcHRpb25zKi9cblxuLypydGw6YmVnaW46Y29uZmlnOlxue1xuICAgIFwib3B0aW9uc1wiOntcbiAgICAgICAgXCJhdXRvUmVuYW1lXCI6IHRydWUsXG4gICAgICAgIFwic3RyaW5nTWFwXCI6W1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCIgICAgOiBcInByZXYtbmV4dFwiLFxuICAgICAgICAgICAgXCJzZWFyY2hcIiAgOiBbXCJwcmV2XCIsIFwiUHJldlwiLCBcIlBSRVZcIl0sXG4gICAgICAgICAgICBcInJlcGxhY2VcIiA6IFtcIm5leHRcIiwgXCJOZXh0XCIsIFwiTkVYVFwiXSxcbiAgICAgICAgICAgIFwib3B0aW9uc1wiIDoge1wiaWdub3JlQ2FzZVwiOmZhbHNlfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICBcInBsdWdpbnNcIjpbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcInRlc3RcIixcbiAgICAgICAgXCJkaXJlY3RpdmVzXCI6e1xuICAgICAgICAgIFwiY29udHJvbFwiOiB7fSxcbiAgICAgICAgICBcInZhbHVlXCI6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIFwicHJvY2Vzc29yc1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29udGVudFwiLFxuICAgICAgICAgICAgXCJleHByXCI6IC9jb250ZW50L2ltLFxuICAgICAgICAgICAgXCJhY3Rpb25cIjogZnVuY3Rpb24gKHByb3AsIHZhbHVlLCBjeHQpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnXCJBXCInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgJ3Byb3AnOiBwcm9wLCAndmFsdWUnOiAnXCJBQkNcIicgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnXCJBQkNcIicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAncHJvcCc6IHByb3AsICd2YWx1ZSc6ICdcIkFcIicgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB7ICdwcm9wJzogcHJvcCwgJ3ZhbHVlJzogdmFsdWUgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIF1cbn0qL1xuZGl2OmJlZm9yZSB7IGNvbnRlbnQ6IFwiQVwiO30gZGl2OmFmdGVyIHsgY29udGVudDogXCJBQkNcIjt9XG5cbi5kZW1vLXByZXYsIC5kZW1vLVByZXYsIC5kZW1vLVBSRVYgeyBjb250ZW50OiAncCc7IH1cbi5kZW1vLW5leHQsIC5kZW1vLU5leHQsIC5kZW1vLU5FWFQgeyBjb250ZW50OiAnbic7IH1cblxuLypydGw6ZW5kOmNvbmZpZyovXG5cbi8qIXJ0bDpiZWdpbjpyZW1vdmUqL1xuQGltcG9ydCB1cmwoL3Rlc3QuY3NzKTtcbmkge1xuICBjb2xvcjogYmx1ZTsgIFxufVxuLypydGw6ZW5kOnJlbW92ZSovXG5cblxuZGl2IHtcbiAgLypydGw6cmVtb3ZlKi9cbiAgZGlyZWN0aW9uOiBydGw7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuICBwYWRkaW5nOiAxMHB4O1xufVxuXG4vKnJ0bDpiZWdpbjppZ25vcmUqL1xuLnNhbXBsZSB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbn1cbi8qcnRsOmVuZDppZ25vcmUqL1xuXG5cbi8qcnRsOmJlZ2luOm9wdGlvbnM6e1wiYXV0b1JlbmFtZVwiOmZhbHNlLCBcImNsZWFuXCI6IGZhbHNlfSovXG4ucmlnaHQgeyBkaXNwbGF5OmlubGluZTt9XG4vKnJ0bDpiZWdpbjpvcHRpb25zOntcImF1dG9SZW5hbWVcIjp0cnVlLCBcImdyZWVkeVwiOiB0cnVlfSovXG4uYnJpZ2h0IHsgZGlzcGxheTppbmxpbmU7fVxuLypydGw6ZW5kOm9wdGlvbnMqL1xuLmJyaWdodGVyIHsgZGlzcGxheTppbmxpbmU7fVxuLypydGw6ZW5kOm9wdGlvbnMqL1xuXG4vKiBhdXRvIHJlbmFtZSBvbmx5IGlmIGEgcGFpciBleGlzdHMgKi9cblxuLypydGw6YmVnaW46b3B0aW9uczp7XCJhdXRvUmVuYW1lXCI6dHJ1ZSwgXCJhdXRvUmVuYW1lU3RyaWN0XCI6IHRydWV9Ki9cblxuLyogVGhlIGZvbGxvd2luZyBzaG91bGQgbm90IGJlIHJlbmFtZWQgKi9cbi5sdHJ7IGRpc3BsYXk6IGlubGluZS1mbGV4O31cblxuLyogQnV0IHRoZXNlIHNob3VsZCAqL1xuLnJpZ2h0eyBkaXNwbGF5OiBpbmxpbmUtZmxleDt9XG4ubGVmdCB7IGRpc3BsYXk6IGJsb2NrO31cblxuLypydGw6ZW5kOm9wdGlvbnMqLyJdfQ== */