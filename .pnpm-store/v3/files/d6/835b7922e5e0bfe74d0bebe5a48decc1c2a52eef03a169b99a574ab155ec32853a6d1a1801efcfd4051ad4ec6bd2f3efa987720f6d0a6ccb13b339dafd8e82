{"version":3,"file":"index.development.js","sources":["../../../autocomplete-shared/dist/esm/getAttributeValueByPath.js","../../../autocomplete-shared/dist/esm/warn.js","../../src/constants/index.ts","../../src/highlight/parseAttribute.ts","../../src/highlight/parseAlgoliaHitHighlight.ts","../../src/highlight/isPartHighlighted.ts","../../src/highlight/reverseHighlightedParts.ts","../../src/highlight/parseAlgoliaHitReverseHighlight.ts","../../src/highlight/parseAlgoliaHitSnippet.ts","../../src/highlight/parseAlgoliaHitReverseSnippet.ts","../../src/version.ts","../../src/search/searchForFacetValues.ts","../../src/search/getAlgoliaFacetHits.ts","../../src/search/search.ts","../../src/search/getAlgoliaHits.ts","../../src/search/getAlgoliaResults.ts"],"sourcesContent":["export function getAttributeValueByPath(record, path) {\n  return path.reduce(function (current, key) {\n    return current && current[key];\n  }, record);\n}","export var warnCache = {\n  current: {}\n};\n/**\n * Logs a warning if the condition is not met.\n * This is used to log issues in development environment only.\n */\n\nexport function warn(condition, message) {\n  if (!(process.env.NODE_ENV !== 'production')) {\n    return;\n  }\n\n  if (condition) {\n    return;\n  }\n\n  var sanitizedMessage = message.trim();\n  var hasAlreadyPrinted = warnCache.current[sanitizedMessage];\n\n  if (!hasAlreadyPrinted) {\n    warnCache.current[sanitizedMessage] = true; // eslint-disable-next-line no-console\n\n    console.warn(\"[Autocomplete] \".concat(sanitizedMessage));\n  }\n}","export const HIGHLIGHT_PRE_TAG = '__aa-highlight__';\nexport const HIGHLIGHT_POST_TAG = '__/aa-highlight__';\n","import { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n\nimport { ParsedAttribute } from './ParsedAttribute';\n\n/**\n * Creates a data structure that allows to concatenate similar highlighting\n * parts in a single value.\n */\nfunction createAttributeSet(initialValue: ParsedAttribute[] = []) {\n  const value = initialValue;\n\n  return {\n    get() {\n      return value;\n    },\n    add(part: ParsedAttribute) {\n      const lastPart: ParsedAttribute | undefined = value[value.length - 1];\n\n      if (lastPart?.isHighlighted === part.isHighlighted) {\n        value[value.length - 1] = {\n          value: lastPart.value + part.value,\n          isHighlighted: lastPart.isHighlighted,\n        };\n      } else {\n        value.push(part);\n      }\n    },\n  };\n}\n\ntype ParseAttributeParams = {\n  highlightedValue: string;\n};\n\nexport function parseAttribute({\n  highlightedValue,\n}: ParseAttributeParams): ParsedAttribute[] {\n  const preTagParts = highlightedValue.split(HIGHLIGHT_PRE_TAG);\n  const firstValue = preTagParts.shift();\n  const parts = createAttributeSet(\n    firstValue ? [{ value: firstValue, isHighlighted: false }] : []\n  );\n\n  preTagParts.forEach((part) => {\n    const postTagParts = part.split(HIGHLIGHT_POST_TAG);\n\n    parts.add({\n      value: postTagParts[0],\n      isHighlighted: true,\n    });\n\n    if (postTagParts[1] !== '') {\n      parts.add({\n        value: postTagParts[1],\n        isHighlighted: false,\n      });\n    }\n  });\n\n  return parts.get();\n}\n","import { getAttributeValueByPath, warn } from '@algolia/autocomplete-shared';\n\nimport { HighlightedHit } from './HighlightedHit';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitHighlight<THit extends HighlightedHit<unknown>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = Array.isArray(attribute) ? attribute : ([attribute] as string[]);\n  let highlightedValue = getAttributeValueByPath(hit, [\n    '_highlightResult',\n    ...path,\n    'value',\n  ]);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute \"${path.join('.')}\" described by the path ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToHighlight\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToHighlight/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, path) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { ParsedAttribute } from './ParsedAttribute';\n\nconst htmlEscapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n};\nconst hasAlphanumeric = new RegExp(/\\w/i);\nconst regexEscapedHtml = /&(amp|quot|lt|gt|#39);/g;\nconst regexHasEscapedHtml = RegExp(regexEscapedHtml.source);\n\nfunction unescape(value: string): string {\n  return value && regexHasEscapedHtml.test(value)\n    ? value.replace(regexEscapedHtml, (character) => htmlEscapes[character])\n    : value;\n}\n\nexport function isPartHighlighted(parts: ParsedAttribute[], i: number) {\n  const current = parts[i];\n  const isNextHighlighted = parts[i + 1]?.isHighlighted || true;\n  const isPreviousHighlighted = parts[i - 1]?.isHighlighted || true;\n\n  if (\n    !hasAlphanumeric.test(unescape(current.value)) &&\n    isPreviousHighlighted === isNextHighlighted\n  ) {\n    return isPreviousHighlighted;\n  }\n\n  return current.isHighlighted;\n}\n","import { isPartHighlighted } from './isPartHighlighted';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function reverseHighlightedParts(parts: ParsedAttribute[]) {\n  // We don't want to highlight the whole word when no parts match.\n  if (!parts.some((part) => part.isHighlighted)) {\n    return parts.map((part) => ({ ...part, isHighlighted: false }));\n  }\n\n  return parts.map((part, i) => ({\n    ...part,\n    isHighlighted: !isPartHighlighted(parts, i),\n  }));\n}\n","import { HighlightedHit } from './HighlightedHit';\nimport { parseAlgoliaHitHighlight } from './parseAlgoliaHitHighlight';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseHighlight<\n  THit extends HighlightedHit<unknown>\n>(props: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitHighlight<THit>(props));\n}\n","import { getAttributeValueByPath, warn } from '@algolia/autocomplete-shared';\n\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { SnippetedHit } from './SnippetedHit';\n\nexport function parseAlgoliaHitSnippet<THit extends SnippetedHit<unknown>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = Array.isArray(attribute) ? attribute : ([attribute] as string[]);\n  let highlightedValue = getAttributeValueByPath(hit, [\n    '_snippetResult',\n    ...path,\n    'value',\n  ]);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute \"${path.join('.')}\" described by the path ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToSnippet\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToSnippet/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, path) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAlgoliaHitSnippet } from './parseAlgoliaHitSnippet';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\nimport { SnippetedHit } from './SnippetedHit';\n\nexport function parseAlgoliaHitReverseSnippet<\n  THit extends SnippetedHit<unknown>\n>(props: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitSnippet<THit>(props));\n}\n","export const version = '1.0.0-alpha.44';\n","import {\n  SearchForFacetValuesQueryParams,\n  SearchOptions,\n} from '@algolia/client-search';\nimport { SearchClient } from 'algoliasearch/lite';\n\nimport { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\nimport { version } from '../version';\n\nimport { UserAgent } from './UserAgent';\n\ntype FacetQuery = {\n  indexName: string;\n  params: SearchForFacetValuesQueryParams & SearchOptions;\n};\nexport interface SearchForFacetValuesParams {\n  searchClient: SearchClient;\n  queries: FacetQuery[];\n  userAgents?: UserAgent[];\n}\n\nexport function searchForFacetValues({\n  searchClient,\n  queries,\n  userAgents = [],\n}: SearchForFacetValuesParams) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    const algoliaAgents: UserAgent[] = [\n      { segment: 'autocomplete-core', version },\n      ...userAgents,\n    ];\n\n    algoliaAgents.forEach(({ segment, version }) => {\n      searchClient.addAlgoliaAgent(segment, version);\n    });\n  }\n\n  return searchClient.searchForFacetValues(\n    queries.map((searchParameters) => {\n      const { indexName, params } = searchParameters;\n\n      return {\n        indexName,\n        params: {\n          highlightPreTag: HIGHLIGHT_PRE_TAG,\n          highlightPostTag: HIGHLIGHT_POST_TAG,\n          ...params,\n        },\n      };\n    })\n  );\n}\n","import {\n  searchForFacetValues,\n  SearchForFacetValuesParams,\n} from './searchForFacetValues';\n\ntype FacetHit = {\n  label: string;\n  count: number;\n  _highlightResult: {\n    label: {\n      value: string;\n    };\n  };\n};\n\nexport function getAlgoliaFacetHits({\n  searchClient,\n  queries,\n  userAgents,\n}: SearchForFacetValuesParams): Promise<FacetHit[][]> {\n  return searchForFacetValues({ searchClient, queries, userAgents }).then(\n    (response) => {\n      return response.map((result) =>\n        result.facetHits.map((facetHit) => {\n          return {\n            label: facetHit.value,\n            count: facetHit.count,\n            _highlightResult: {\n              label: {\n                value: facetHit.highlighted,\n              },\n            },\n          };\n        })\n      );\n    }\n  );\n}\n","import { MultipleQueriesQuery } from '@algolia/client-search';\nimport { SearchClient } from 'algoliasearch/lite';\n\nimport { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\nimport { version } from '../version';\n\nimport { UserAgent } from './UserAgent';\n\nexport interface SearchParams {\n  searchClient: SearchClient;\n  queries: MultipleQueriesQuery[];\n  userAgents?: UserAgent[];\n}\n\nexport function search<TRecord>({\n  searchClient,\n  queries,\n  userAgents = [],\n}: SearchParams) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    const algoliaAgents: UserAgent[] = [\n      { segment: 'autocomplete-core', version },\n      ...userAgents,\n    ];\n\n    algoliaAgents.forEach(({ segment, version }) => {\n      searchClient.addAlgoliaAgent(segment, version);\n    });\n  }\n\n  return searchClient.search<TRecord>(\n    queries.map((searchParameters) => {\n      const { indexName, query, params } = searchParameters;\n\n      return {\n        indexName,\n        query,\n        params: {\n          hitsPerPage: 5,\n          highlightPreTag: HIGHLIGHT_PRE_TAG,\n          highlightPostTag: HIGHLIGHT_POST_TAG,\n          ...params,\n        },\n      };\n    })\n  );\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaHits<TRecord>({\n  searchClient,\n  queries,\n  userAgents,\n}: SearchParams): Promise<Array<Array<Hit<TRecord>>>> {\n  return search<TRecord>({ searchClient, queries, userAgents }).then(\n    (response) => {\n      const results = response.results;\n\n      return results.map((result) =>\n        result.hits.map((hit) => {\n          return {\n            ...hit,\n            __autocomplete_indexName: result.index,\n            __autocomplete_queryID: result.queryID,\n          };\n        })\n      );\n    }\n  );\n}\n","import { SearchResponse } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaResults<TRecord>({\n  searchClient,\n  queries,\n  userAgents,\n}: SearchParams): Promise<Array<SearchResponse<TRecord>>> {\n  return search<TRecord>({ searchClient, queries, userAgents }).then(\n    (response) => {\n      return response.results;\n    }\n  );\n}\n"],"names":["getAttributeValueByPath","record","path","reduce","current","key","warnCache","warn","condition","message","sanitizedMessage","trim","hasAlreadyPrinted","console","concat","HIGHLIGHT_PRE_TAG","HIGHLIGHT_POST_TAG","createAttributeSet","initialValue","value","get","add","part","lastPart","length","isHighlighted","push","parseAttribute","highlightedValue","preTagParts","split","firstValue","shift","parts","forEach","postTagParts","parseAlgoliaHitHighlight","hit","attribute","Array","isArray","process","join","JSON","stringify","htmlEscapes","hasAlphanumeric","RegExp","regexEscapedHtml","regexHasEscapedHtml","source","unescape","test","replace","character","isPartHighlighted","i","isNextHighlighted","isPreviousHighlighted","reverseHighlightedParts","some","map","parseAlgoliaHitReverseHighlight","props","parseAlgoliaHitSnippet","parseAlgoliaHitReverseSnippet","version","searchForFacetValues","searchClient","queries","userAgents","addAlgoliaAgent","algoliaAgents","segment","searchParameters","indexName","params","highlightPreTag","highlightPostTag","getAlgoliaFacetHits","then","response","result","facetHits","facetHit","label","count","_highlightResult","highlighted","search","query","hitsPerPage","getAlgoliaHits","results","hits","__autocomplete_indexName","index","__autocomplete_queryID","queryID","getAlgoliaResults"],"mappings":"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"}