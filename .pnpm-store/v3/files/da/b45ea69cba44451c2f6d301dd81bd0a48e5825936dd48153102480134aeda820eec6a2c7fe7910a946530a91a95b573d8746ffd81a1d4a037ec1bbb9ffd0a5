{"version":3,"file":"walk.mjs","sources":["../src/index.js"],"sourcesContent":["// AST walker module for Mozilla Parser API compatible trees\n\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be\n//\n//     walk.simple(myTree, {\n//         Expression: function(node) { ... }\n//     });\n//\n// to do something with all expressions. All Parser API node types\n// can be used to identify node types, as well as Expression and\n// Statement, which denote categories of nodes.\n//\n// The base argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\n\nexport function simple(node, visitors, baseVisitor, state, override) {\n  if (!baseVisitor) baseVisitor = base\n  ;(function c(node, st, override) {\n    let type = override || node.type, found = visitors[type]\n    baseVisitor[type](node, st, c)\n    if (found) found(node, st)\n  })(node, state, override)\n}\n\n// An ancestor walk keeps an array of ancestor nodes (including the\n// current node) and passes them to the callback as third parameter\n// (and also as state parameter when no other state is present).\nexport function ancestor(node, visitors, baseVisitor, state, override) {\n  let ancestors = []\n  if (!baseVisitor) baseVisitor = base\n  ;(function c(node, st, override) {\n    let type = override || node.type, found = visitors[type]\n    let isNew = node !== ancestors[ancestors.length - 1]\n    if (isNew) ancestors.push(node)\n    baseVisitor[type](node, st, c)\n    if (found) found(node, st || ancestors, ancestors)\n    if (isNew) ancestors.pop()\n  })(node, state, override)\n}\n\n// A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\nexport function recursive(node, state, funcs, baseVisitor, override) {\n  let visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor\n  ;(function c(node, st, override) {\n    visitor[override || node.type](node, st, c)\n  })(node, state, override)\n}\n\nfunction makeTest(test) {\n  if (typeof test === \"string\")\n    return type => type === test\n  else if (!test)\n    return () => true\n  else\n    return test\n}\n\nclass Found {\n  constructor(node, state) { this.node = node; this.state = state }\n}\n\n// A full walk triggers the callback on each node\nexport function full(node, callback, baseVisitor, state, override) {\n  if (!baseVisitor) baseVisitor = base\n  let last\n  ;(function c(node, st, override) {\n    let type = override || node.type\n    baseVisitor[type](node, st, c)\n    if (last !== node) {\n      callback(node, st, type)\n      last = node\n    }\n  })(node, state, override)\n}\n\n// An fullAncestor walk is like an ancestor walk, but triggers\n// the callback on each node\nexport function fullAncestor(node, callback, baseVisitor, state) {\n  if (!baseVisitor) baseVisitor = base\n  let ancestors = [], last\n  ;(function c(node, st, override) {\n    let type = override || node.type\n    let isNew = node !== ancestors[ancestors.length - 1]\n    if (isNew) ancestors.push(node)\n    baseVisitor[type](node, st, c)\n    if (last !== node) {\n      callback(node, st || ancestors, ancestors, type)\n      last = node\n    }\n    if (isNew) ancestors.pop()\n  })(node, state)\n}\n\n// Find a node with a given start, end, and type (all are optional,\n// null can be used as wildcard). Returns a {node, state} object, or\n// undefined when it doesn't find a matching node.\nexport function findNodeAt(node, start, end, test, baseVisitor, state) {\n  if (!baseVisitor) baseVisitor = base\n  test = makeTest(test)\n  try {\n    (function c(node, st, override) {\n      let type = override || node.type\n      if ((start == null || node.start <= start) &&\n          (end == null || node.end >= end))\n        baseVisitor[type](node, st, c)\n      if ((start == null || node.start === start) &&\n          (end == null || node.end === end) &&\n          test(type, node))\n        throw new Found(node, st)\n    })(node, state)\n  } catch (e) {\n    if (e instanceof Found) return e\n    throw e\n  }\n}\n\n// Find the innermost node of a given type that contains the given\n// position. Interface similar to findNodeAt.\nexport function findNodeAround(node, pos, test, baseVisitor, state) {\n  test = makeTest(test)\n  if (!baseVisitor) baseVisitor = base\n  try {\n    (function c(node, st, override) {\n      let type = override || node.type\n      if (node.start > pos || node.end < pos) return\n      baseVisitor[type](node, st, c)\n      if (test(type, node)) throw new Found(node, st)\n    })(node, state)\n  } catch (e) {\n    if (e instanceof Found) return e\n    throw e\n  }\n}\n\n// Find the outermost matching node after a given position.\nexport function findNodeAfter(node, pos, test, baseVisitor, state) {\n  test = makeTest(test)\n  if (!baseVisitor) baseVisitor = base\n  try {\n    (function c(node, st, override) {\n      if (node.end < pos) return\n      let type = override || node.type\n      if (node.start >= pos && test(type, node)) throw new Found(node, st)\n      baseVisitor[type](node, st, c)\n    })(node, state)\n  } catch (e) {\n    if (e instanceof Found) return e\n    throw e\n  }\n}\n\n// Find the outermost matching node before a given position.\nexport function findNodeBefore(node, pos, test, baseVisitor, state) {\n  test = makeTest(test)\n  if (!baseVisitor) baseVisitor = base\n  let max\n  ;(function c(node, st, override) {\n    if (node.start > pos) return\n    let type = override || node.type\n    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node))\n      max = new Found(node, st)\n    baseVisitor[type](node, st, c)\n  })(node, state)\n  return max\n}\n\n// Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\nexport function make(funcs, baseVisitor) {\n  let visitor = Object.create(baseVisitor || base)\n  for (let type in funcs) visitor[type] = funcs[type]\n  return visitor\n}\n\nfunction skipThrough(node, st, c) { c(node, st) }\nfunction ignore(_node, _st, _c) {}\n\n// Node walkers.\n\nexport const base = {}\n\nbase.Program = base.BlockStatement = (node, st, c) => {\n  for (let stmt of node.body)\n    c(stmt, st, \"Statement\")\n}\nbase.Statement = skipThrough\nbase.EmptyStatement = ignore\nbase.ExpressionStatement = base.ParenthesizedExpression = base.ChainExpression =\n  (node, st, c) => c(node.expression, st, \"Expression\")\nbase.IfStatement = (node, st, c) => {\n  c(node.test, st, \"Expression\")\n  c(node.consequent, st, \"Statement\")\n  if (node.alternate) c(node.alternate, st, \"Statement\")\n}\nbase.LabeledStatement = (node, st, c) => c(node.body, st, \"Statement\")\nbase.BreakStatement = base.ContinueStatement = ignore\nbase.WithStatement = (node, st, c) => {\n  c(node.object, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.SwitchStatement = (node, st, c) => {\n  c(node.discriminant, st, \"Expression\")\n  for (let cs of node.cases) {\n    if (cs.test) c(cs.test, st, \"Expression\")\n    for (let cons of cs.consequent)\n      c(cons, st, \"Statement\")\n  }\n}\nbase.SwitchCase = (node, st, c) => {\n  if (node.test) c(node.test, st, \"Expression\")\n  for (let cons of node.consequent)\n    c(cons, st, \"Statement\")\n}\nbase.ReturnStatement = base.YieldExpression = base.AwaitExpression = (node, st, c) => {\n  if (node.argument) c(node.argument, st, \"Expression\")\n}\nbase.ThrowStatement = base.SpreadElement =\n  (node, st, c) => c(node.argument, st, \"Expression\")\nbase.TryStatement = (node, st, c) => {\n  c(node.block, st, \"Statement\")\n  if (node.handler) c(node.handler, st)\n  if (node.finalizer) c(node.finalizer, st, \"Statement\")\n}\nbase.CatchClause = (node, st, c) => {\n  if (node.param) c(node.param, st, \"Pattern\")\n  c(node.body, st, \"Statement\")\n}\nbase.WhileStatement = base.DoWhileStatement = (node, st, c) => {\n  c(node.test, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.ForStatement = (node, st, c) => {\n  if (node.init) c(node.init, st, \"ForInit\")\n  if (node.test) c(node.test, st, \"Expression\")\n  if (node.update) c(node.update, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.ForInStatement = base.ForOfStatement = (node, st, c) => {\n  c(node.left, st, \"ForInit\")\n  c(node.right, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.ForInit = (node, st, c) => {\n  if (node.type === \"VariableDeclaration\") c(node, st)\n  else c(node, st, \"Expression\")\n}\nbase.DebuggerStatement = ignore\n\nbase.FunctionDeclaration = (node, st, c) => c(node, st, \"Function\")\nbase.VariableDeclaration = (node, st, c) => {\n  for (let decl of node.declarations)\n    c(decl, st)\n}\nbase.VariableDeclarator = (node, st, c) => {\n  c(node.id, st, \"Pattern\")\n  if (node.init) c(node.init, st, \"Expression\")\n}\n\nbase.Function = (node, st, c) => {\n  if (node.id) c(node.id, st, \"Pattern\")\n  for (let param of node.params)\n    c(param, st, \"Pattern\")\n  c(node.body, st, node.expression ? \"Expression\" : \"Statement\")\n}\n\nbase.Pattern = (node, st, c) => {\n  if (node.type === \"Identifier\")\n    c(node, st, \"VariablePattern\")\n  else if (node.type === \"MemberExpression\")\n    c(node, st, \"MemberPattern\")\n  else\n    c(node, st)\n}\nbase.VariablePattern = ignore\nbase.MemberPattern = skipThrough\nbase.RestElement = (node, st, c) => c(node.argument, st, \"Pattern\")\nbase.ArrayPattern = (node, st, c) => {\n  for (let elt of node.elements) {\n    if (elt) c(elt, st, \"Pattern\")\n  }\n}\nbase.ObjectPattern = (node, st, c) => {\n  for (let prop of node.properties) {\n    if (prop.type === \"Property\") {\n      if (prop.computed) c(prop.key, st, \"Expression\")\n      c(prop.value, st, \"Pattern\")\n    } else if (prop.type === \"RestElement\") {\n      c(prop.argument, st, \"Pattern\")\n    }\n  }\n}\n\nbase.Expression = skipThrough\nbase.ThisExpression = base.Super = base.MetaProperty = ignore\nbase.ArrayExpression = (node, st, c) => {\n  for (let elt of node.elements) {\n    if (elt) c(elt, st, \"Expression\")\n  }\n}\nbase.ObjectExpression = (node, st, c) => {\n  for (let prop of node.properties)\n    c(prop, st)\n}\nbase.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration\nbase.SequenceExpression = (node, st, c) => {\n  for (let expr of node.expressions)\n    c(expr, st, \"Expression\")\n}\nbase.TemplateLiteral = (node, st, c) => {\n  for (let quasi of node.quasis)\n    c(quasi, st)\n\n  for (let expr of node.expressions)\n    c(expr, st, \"Expression\")\n}\nbase.TemplateElement = ignore\nbase.UnaryExpression = base.UpdateExpression = (node, st, c) => {\n  c(node.argument, st, \"Expression\")\n}\nbase.BinaryExpression = base.LogicalExpression = (node, st, c) => {\n  c(node.left, st, \"Expression\")\n  c(node.right, st, \"Expression\")\n}\nbase.AssignmentExpression = base.AssignmentPattern = (node, st, c) => {\n  c(node.left, st, \"Pattern\")\n  c(node.right, st, \"Expression\")\n}\nbase.ConditionalExpression = (node, st, c) => {\n  c(node.test, st, \"Expression\")\n  c(node.consequent, st, \"Expression\")\n  c(node.alternate, st, \"Expression\")\n}\nbase.NewExpression = base.CallExpression = (node, st, c) => {\n  c(node.callee, st, \"Expression\")\n  if (node.arguments)\n    for (let arg of node.arguments)\n      c(arg, st, \"Expression\")\n}\nbase.MemberExpression = (node, st, c) => {\n  c(node.object, st, \"Expression\")\n  if (node.computed) c(node.property, st, \"Expression\")\n}\nbase.ExportNamedDeclaration = base.ExportDefaultDeclaration = (node, st, c) => {\n  if (node.declaration)\n    c(node.declaration, st, node.type === \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\")\n  if (node.source) c(node.source, st, \"Expression\")\n}\nbase.ExportAllDeclaration = (node, st, c) => {\n  if (node.exported)\n    c(node.exported, st)\n  c(node.source, st, \"Expression\")\n}\nbase.ImportDeclaration = (node, st, c) => {\n  for (let spec of node.specifiers)\n    c(spec, st)\n  c(node.source, st, \"Expression\")\n}\nbase.ImportExpression = (node, st, c) => {\n  c(node.source, st, \"Expression\")\n}\nbase.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore\n\nbase.TaggedTemplateExpression = (node, st, c) => {\n  c(node.tag, st, \"Expression\")\n  c(node.quasi, st, \"Expression\")\n}\nbase.ClassDeclaration = base.ClassExpression = (node, st, c) => c(node, st, \"Class\")\nbase.Class = (node, st, c) => {\n  if (node.id) c(node.id, st, \"Pattern\")\n  if (node.superClass) c(node.superClass, st, \"Expression\")\n  c(node.body, st)\n}\nbase.ClassBody = (node, st, c) => {\n  for (let elt of node.body)\n    c(elt, st)\n}\nbase.MethodDefinition = base.Property = (node, st, c) => {\n  if (node.computed) c(node.key, st, \"Expression\")\n  c(node.value, st, \"Expression\")\n}\n"],"names":["let"],"mappings":"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"}