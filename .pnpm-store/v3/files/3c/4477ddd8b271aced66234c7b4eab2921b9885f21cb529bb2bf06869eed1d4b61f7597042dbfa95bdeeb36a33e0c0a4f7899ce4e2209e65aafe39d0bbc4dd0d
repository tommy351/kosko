"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificateSigningRequest = exports.IoK8sApiCertificatesV1CertificateSigningRequest = void 0;
const base_1 = require("@kubernetes-models/base");
const IoK8sApiCertificatesV1CertificateSigningRequest_1 = require("../_schemas/IoK8sApiCertificatesV1CertificateSigningRequest.js");
/**
 * CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.
 *
 * Kubelets use this API to obtain:
 *  1. client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client-kubelet" signerName).
 *  2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the "kubernetes.io/kubelet-serving" signerName).
 *
 * This API can be used to request client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client" signerName), or to obtain certificates from custom non-Kubernetes signers.
 */
class IoK8sApiCertificatesV1CertificateSigningRequest extends base_1.Model {
    constructor(data) {
        super({
            apiVersion: IoK8sApiCertificatesV1CertificateSigningRequest.apiVersion,
            kind: IoK8sApiCertificatesV1CertificateSigningRequest.kind,
            ...data
        });
    }
}
exports.IoK8sApiCertificatesV1CertificateSigningRequest = IoK8sApiCertificatesV1CertificateSigningRequest;
exports.CertificateSigningRequest = IoK8sApiCertificatesV1CertificateSigningRequest;
IoK8sApiCertificatesV1CertificateSigningRequest.apiVersion = "certificates.k8s.io/v1";
IoK8sApiCertificatesV1CertificateSigningRequest.kind = "CertificateSigningRequest";
base_1.Model.setSchema(IoK8sApiCertificatesV1CertificateSigningRequest, "io.k8s.api.certificates.v1.CertificateSigningRequest", IoK8sApiCertificatesV1CertificateSigningRequest_1.addSchema);
